{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"./posts.service\";\nexport class TaskListService {\n  constructor(router, postService) {\n    this.router = router;\n    this.postService = postService;\n  }\n  togglePriority(task) {\n    task.priority = task.priority ? false : true;\n  }\n  onTaskEdit(taskToEdit, newTask) {\n    const taskID = this.taskList.indexOf(taskToEdit);\n    this.taskList[taskID].name = newTask.name;\n    this.taskList[taskID].description = newTask.description;\n    this.taskList[taskID].date = newTask.date;\n    this.taskList[taskID].priority = newTask.priority;\n  }\n  getTasks(taskType) {\n    switch (taskType) {\n      case \"all\":\n        return {\n          name: \"All tasks\",\n          taskList: this.taskList\n        };\n      case \"important\":\n        const importantTasks = this.taskList.filter(task => task.priority == true);\n        return {\n          name: \"Important\",\n          taskList: importantTasks\n        };\n      case \"today\":\n        const date = new Date().toISOString().slice(0, 10);\n        const todayTasks = this.taskList.filter(task => task.date == date);\n        return {\n          name: \"Today\",\n          taskList: todayTasks\n        };\n      case \"weekly\":\n        let today = new Date();\n        let nextWeek = new Date();\n        nextWeek.setDate(today.getDate() + 7);\n        today = today.toISOString().slice(0, 10);\n        nextWeek = nextWeek.toISOString().slice(0, 10);\n        const weekTasks = this.taskList.filter(task => Date.parse(task.date) >= Date.parse(today) && Date.parse(task.date) <= Date.parse(nextWeek));\n        return {\n          name: \"Nex 7 Days\",\n          taskList: weekTasks\n        };\n      default:\n        this.router.navigate([\"/not-found\"]);\n    }\n  }\n  deleteTask(task) {\n    const taskID = this.taskList.indexOf(task);\n    if (taskID < 0) return;\n    this.taskList.splice(taskID, 1);\n  }\n  deleteTasksOfProject(taskList) {\n    console.log(taskList);\n    taskList.forEach(task => {\n      this.taskList.splice(this.taskList.indexOf(task), 1);\n    });\n  }\n  importTasks() {\n    const importedTasks = [];\n    this.postService.fetchPost().subscribe(responseData => {\n      responseData.forEach(project => {\n        console.log(responseData);\n        if (project.projectTaskList) {\n          project.projectTaskList.forEach(elem => importedTasks.push(elem));\n          this.testValue = responseData;\n        }\n      });\n    });\n  }\n}\nTaskListService.ɵfac = function TaskListService_Factory(t) {\n  return new (t || TaskListService)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.PostsService));\n};\nTaskListService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: TaskListService,\n  factory: TaskListService.ɵfac,\n  providedIn: \"root\"\n});","map":{"version":3,"mappings":";;;AAUA,OAAM,MAAOA,eAAe;EAC1BC,YAAoBC,MAAc,EAAUC,WAAyB;IAAjD,WAAM,GAAND,MAAM;IAAkB,gBAAW,GAAXC,WAAW;EAAiB;EAKxEC,cAAc,CAACC,IAAU;IACvBA,IAAI,CAACC,QAAQ,GAAGD,IAAI,CAACC,QAAQ,GAAG,KAAK,GAAG,IAAI;EAC9C;EAEAC,UAAU,CAACC,UAAU,EAAEC,OAAO;IAC5B,MAAMC,MAAM,GAAG,IAAI,CAACC,QAAQ,CAACC,OAAO,CAACJ,UAAU,CAAC;IAChD,IAAI,CAACG,QAAQ,CAACD,MAAM,CAAC,CAACG,IAAI,GAAGJ,OAAO,CAACI,IAAI;IACzC,IAAI,CAACF,QAAQ,CAACD,MAAM,CAAC,CAACI,WAAW,GAAGL,OAAO,CAACK,WAAW;IACvD,IAAI,CAACH,QAAQ,CAACD,MAAM,CAAC,CAACK,IAAI,GAAGN,OAAO,CAACM,IAAI;IACzC,IAAI,CAACJ,QAAQ,CAACD,MAAM,CAAC,CAACJ,QAAQ,GAAGG,OAAO,CAACH,QAAQ;EACnD;EAEAU,QAAQ,CAACC,QAAQ;IACf,QAAQA,QAAQ;MACd,KAAK,KAAK;QACR,OAAO;UAAEJ,IAAI,EAAE,WAAW;UAAEF,QAAQ,EAAE,IAAI,CAACA;QAAQ,CAAE;MACvD,KAAK,WAAW;QACd,MAAMO,cAAc,GAAG,IAAI,CAACP,QAAQ,CAACQ,MAAM,CACxCd,IAAI,IAAKA,IAAI,CAACC,QAAQ,IAAI,IAAI,CAChC;QACD,OAAO;UAAEO,IAAI,EAAE,WAAW;UAAEF,QAAQ,EAAEO;QAAc,CAAE;MACxD,KAAK,OAAO;QACV,MAAMH,IAAI,GAAG,IAAIK,IAAI,EAAE,CAACC,WAAW,EAAE,CAACC,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC;QAClD,MAAMC,UAAU,GAAG,IAAI,CAACZ,QAAQ,CAACQ,MAAM,CAAEd,IAAI,IAAKA,IAAI,CAACU,IAAI,IAAIA,IAAI,CAAC;QACpE,OAAO;UAAEF,IAAI,EAAE,OAAO;UAAEF,QAAQ,EAAEY;QAAU,CAAE;MAEhD,KAAK,QAAQ;QACX,IAAIC,KAAK,GAAQ,IAAIJ,IAAI,EAAE;QAC3B,IAAIK,QAAQ,GAAQ,IAAIL,IAAI,EAAE;QAC9BK,QAAQ,CAACC,OAAO,CAACF,KAAK,CAACG,OAAO,EAAE,GAAG,CAAC,CAAC;QACrCH,KAAK,GAAGA,KAAK,CAACH,WAAW,EAAE,CAACC,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC;QACxCG,QAAQ,GAAGA,QAAQ,CAACJ,WAAW,EAAE,CAACC,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC;QAC9C,MAAMM,SAAS,GAAG,IAAI,CAACjB,QAAQ,CAACQ,MAAM,CACnCd,IAAI,IACHe,IAAI,CAACS,KAAK,CAACxB,IAAI,CAACU,IAAI,CAAC,IAAIK,IAAI,CAACS,KAAK,CAACL,KAAK,CAAC,IAC1CJ,IAAI,CAACS,KAAK,CAACxB,IAAI,CAACU,IAAI,CAAC,IAAIK,IAAI,CAACS,KAAK,CAACJ,QAAQ,CAAC,CAChD;QACD,OAAO;UAAEZ,IAAI,EAAE,YAAY;UAAEF,QAAQ,EAAEiB;QAAS,CAAE;MACpD;QACE,IAAI,CAAC1B,MAAM,CAAC4B,QAAQ,CAAC,CAAC,YAAY,CAAC,CAAC;IAAC;EAE3C;EAEAC,UAAU,CAAC1B,IAAI;IACb,MAAMK,MAAM,GAAG,IAAI,CAACC,QAAQ,CAACC,OAAO,CAACP,IAAI,CAAC;IAC1C,IAAIK,MAAM,GAAG,CAAC,EAAE;IAChB,IAAI,CAACC,QAAQ,CAACqB,MAAM,CAACtB,MAAM,EAAE,CAAC,CAAC;EACjC;EAEAuB,oBAAoB,CAACtB,QAAQ;IAC3BuB,OAAO,CAACC,GAAG,CAACxB,QAAQ,CAAC;IACrBA,QAAQ,CAACyB,OAAO,CAAE/B,IAAI,IAAI;MACxB,IAAI,CAACM,QAAQ,CAACqB,MAAM,CAAC,IAAI,CAACrB,QAAQ,CAACC,OAAO,CAACP,IAAI,CAAC,EAAE,CAAC,CAAC;IACtD,CAAC,CAAC;EACJ;EAEAgC,WAAW;IACT,MAAMC,aAAa,GAAG,EAAE;IACxB,IAAI,CAACnC,WAAW,CAACoC,SAAS,EAAE,CAACC,SAAS,CAAEC,YAAY,IAAI;MACtDA,YAAY,CAACL,OAAO,CAAEM,OAAO,IAAI;QAC/BR,OAAO,CAACC,GAAG,CAACM,YAAY,CAAC;QACzB,IAAIC,OAAO,CAACC,eAAe,EAAE;UAC3BD,OAAO,CAACC,eAAe,CAACP,OAAO,CAAEQ,IAAI,IAAKN,aAAa,CAACO,IAAI,CAACD,IAAI,CAAC,CAAC;UACnE,IAAI,CAACE,SAAS,GAAGL,YAAY;;MAEjC,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ;;AAzEWzC,eAAe;mBAAfA,eAAe;AAAA;AAAfA,eAAe;SAAfA,eAAe;EAAA+C,SAAf/C,eAAe;EAAAgD,YAFd;AAAM","names":["TaskListService","constructor","router","postService","togglePriority","task","priority","onTaskEdit","taskToEdit","newTask","taskID","taskList","indexOf","name","description","date","getTasks","taskType","importantTasks","filter","Date","toISOString","slice","todayTasks","today","nextWeek","setDate","getDate","weekTasks","parse","navigate","deleteTask","splice","deleteTasksOfProject","console","log","forEach","importTasks","importedTasks","fetchPost","subscribe","responseData","project","projectTaskList","elem","push","testValue","factory","providedIn"],"sourceRoot":"","sources":["/home/dovydas/repos/app-todolist/src/app/task-list.service.ts"],"sourcesContent":["import { Injectable } from \"@angular/core\";\nimport { Task } from \"./task\";\nimport { Router } from \"@angular/router\";\nimport { Project } from \"./shared/task/project.model\";\nimport { PostsService } from \"./posts.service\";\nimport { Observable } from \"rxjs\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class TaskListService {\n  constructor(private router: Router, private postService: PostsService) {}\n\n  testValue;\n\n  taskList;\n  togglePriority(task: Task) {\n    task.priority = task.priority ? false : true;\n  }\n\n  onTaskEdit(taskToEdit, newTask) {\n    const taskID = this.taskList.indexOf(taskToEdit);\n    this.taskList[taskID].name = newTask.name;\n    this.taskList[taskID].description = newTask.description;\n    this.taskList[taskID].date = newTask.date;\n    this.taskList[taskID].priority = newTask.priority;\n  }\n\n  getTasks(taskType) {\n    switch (taskType) {\n      case \"all\":\n        return { name: \"All tasks\", taskList: this.taskList };\n      case \"important\":\n        const importantTasks = this.taskList.filter(\n          (task) => task.priority == true\n        );\n        return { name: \"Important\", taskList: importantTasks };\n      case \"today\":\n        const date = new Date().toISOString().slice(0, 10);\n        const todayTasks = this.taskList.filter((task) => task.date == date);\n        return { name: \"Today\", taskList: todayTasks };\n\n      case \"weekly\":\n        let today: any = new Date();\n        let nextWeek: any = new Date();\n        nextWeek.setDate(today.getDate() + 7);\n        today = today.toISOString().slice(0, 10);\n        nextWeek = nextWeek.toISOString().slice(0, 10);\n        const weekTasks = this.taskList.filter(\n          (task) =>\n            Date.parse(task.date) >= Date.parse(today) &&\n            Date.parse(task.date) <= Date.parse(nextWeek)\n        );\n        return { name: \"Nex 7 Days\", taskList: weekTasks };\n      default:\n        this.router.navigate([\"/not-found\"]);\n    }\n  }\n\n  deleteTask(task) {\n    const taskID = this.taskList.indexOf(task);\n    if (taskID < 0) return;\n    this.taskList.splice(taskID, 1);\n  }\n\n  deleteTasksOfProject(taskList) {\n    console.log(taskList);\n    taskList.forEach((task) => {\n      this.taskList.splice(this.taskList.indexOf(task), 1);\n    });\n  }\n\n  importTasks() {\n    const importedTasks = [];\n    this.postService.fetchPost().subscribe((responseData) => {\n      responseData.forEach((project) => {\n        console.log(responseData);\n        if (project.projectTaskList) {\n          project.projectTaskList.forEach((elem) => importedTasks.push(elem));\n          this.testValue = responseData;\n        }\n      });\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}