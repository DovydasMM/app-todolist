{"ast":null,"code":"import { Project } from \"./shared/task/project.model\";\nimport { TaskModel } from \"./shared/task/task.model\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./task-list.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"./posts.service\";\nexport class ProjectsService {\n  constructor(taskService, router, postService) {\n    this.taskService = taskService;\n    this.router = router;\n    this.postService = postService;\n  }\n  getProjectList() {\n    return this.projectList;\n  }\n  getProjectByID(id) {\n    return this.projectList[id];\n  }\n  createProject(name) {\n    let id = \"\";\n    let taskArray = [];\n    let newProject = new Project(name, taskArray, this.projectList.length - 1, id);\n    this.projectList.push(newProject);\n    this.router.navigate([`/projects/${this.projectList.length}`]);\n    this.postService.createAndStorePost(newProject).subscribe(responseData => {\n      newProject.id = responseData;\n      //Gets unique ID from firebase and asigns to new project\n      this.postService.updatePost(responseData, {\n        id: responseData\n      }).subscribe();\n    });\n  }\n  addTask(currentProject, name, desc, date) {\n    const projectID = this.projectList.indexOf(currentProject);\n    const newTask = new TaskModel(name, desc, date, false);\n    this.projectList[projectID].projectTaskList.push(newTask);\n    this.taskService.taskList.push(newTask);\n  }\n  deleteTask(task, currentProject = \"\") {\n    if (currentProject == \"\") {\n      console.log(this.projectList[0].projectTaskList[0] = this.taskService.taskList[0]);\n      // const project = this.projectList.find((list) =>\n      //   list.projectTaskList.includes(task)\n      // );\n      // const taskID = project.projectTaskList.indexOf(task);\n      // project.projectTaskList.splice(taskID, 1);\n    } else this.taskService.deleteTask(task);\n  }\n  deleteProject(project) {\n    this.postService.deletePost(project.id);\n    if (project.projectTaskList.length) this.taskService.deleteTasksOfProject(project.projectTaskList);\n    this.projectList.splice(this.projectList.indexOf(project), 1);\n  }\n  importProject() {\n    this.postService.fetchPost().subscribe(responseData => {\n      this.projectList = responseData;\n    });\n  }\n}\nProjectsService.ɵfac = function ProjectsService_Factory(t) {\n  return new (t || ProjectsService)(i0.ɵɵinject(i1.TaskListService), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i3.PostsService));\n};\nProjectsService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ProjectsService,\n  factory: ProjectsService.ɵfac,\n  providedIn: \"root\"\n});","map":{"version":3,"mappings":"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","names":["Project","TaskModel","ProjectsService","constructor","taskService","router","postService","getProjectList","projectList","getProjectByID","id","createProject","name","taskArray","newProject","length","push","navigate","createAndStorePost","subscribe","responseData","updatePost","addTask","currentProject","desc","date","projectID","indexOf","newTask","projectTaskList","taskList","deleteTask","task","console","log","deleteProject","project","deletePost","deleteTasksOfProject","splice","importProject","fetchPost","factory","providedIn"],"sourceRoot":"","sources":["/home/dovydas/repos/app-todolist/src/app/projects.service.ts"],"sourcesContent":["import { Injectable } from \"@angular/core\";\nimport { Project } from \"./shared/task/project.model\";\nimport { TaskModel } from \"./shared/task/task.model\";\nimport { TaskListService } from \"./task-list.service\";\nimport { Task } from \"./task\";\nimport { Router } from \"@angular/router\";\nimport { PostsService } from \"./posts.service\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class ProjectsService {\n  constructor(\n    private taskService: TaskListService,\n    private router: Router,\n    private postService: PostsService\n  ) {}\n\n  projectList: Project[];\n\n  getProjectList() {\n    return this.projectList;\n  }\n\n  getProjectByID(id) {\n    return this.projectList[id];\n  }\n\n  createProject(name) {\n    let id = \"\";\n    let taskArray = [];\n    let newProject: Project = new Project(\n      name,\n      taskArray,\n      this.projectList.length - 1,\n      id\n    );\n    this.projectList.push(newProject);\n    this.router.navigate([`/projects/${this.projectList.length}`]);\n    this.postService\n      .createAndStorePost(newProject)\n      .subscribe((responseData) => {\n        newProject.id = responseData;\n        //Gets unique ID from firebase and asigns to new project\n        this.postService\n          .updatePost(responseData, { id: responseData })\n          .subscribe();\n      });\n  }\n\n  addTask(currentProject, name, desc, date) {\n    const projectID = this.projectList.indexOf(currentProject);\n    const newTask = new TaskModel(name, desc, date, false);\n    this.projectList[projectID].projectTaskList.push(newTask);\n    this.taskService.taskList.push(newTask);\n  }\n\n  deleteTask(task, currentProject: any = \"\") {\n    if (currentProject == \"\") {\n      console.log(\n        (this.projectList[0].projectTaskList[0] = this.taskService.taskList[0])\n      );\n\n      // const project = this.projectList.find((list) =>\n      //   list.projectTaskList.includes(task)\n      // );\n\n      // const taskID = project.projectTaskList.indexOf(task);\n      // project.projectTaskList.splice(taskID, 1);\n    } else this.taskService.deleteTask(task);\n  }\n\n  deleteProject(project: Project) {\n    this.postService.deletePost(project.id);\n    if (project.projectTaskList.length)\n      this.taskService.deleteTasksOfProject(project.projectTaskList);\n    this.projectList.splice(this.projectList.indexOf(project), 1);\n  }\n\n  importProject() {\n    this.postService.fetchPost().subscribe((responseData) => {\n      this.projectList = responseData;\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}